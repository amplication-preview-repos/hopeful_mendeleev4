/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Theme as PrismaTheme } from "@prisma/client";
import { ThemeDto } from "../ThemeDto";

export class ThemeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ThemeCountArgs, "select">): Promise<number> {
    return this.prisma.theme.count(args);
  }

  async themes<T extends Prisma.ThemeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeFindManyArgs>
  ): Promise<PrismaTheme[]> {
    return this.prisma.theme.findMany<Prisma.ThemeFindManyArgs>(args);
  }
  async theme<T extends Prisma.ThemeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeFindUniqueArgs>
  ): Promise<PrismaTheme | null> {
    return this.prisma.theme.findUnique(args);
  }
  async createTheme<T extends Prisma.ThemeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeCreateArgs>
  ): Promise<PrismaTheme> {
    return this.prisma.theme.create<T>(args);
  }
  async updateTheme<T extends Prisma.ThemeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeUpdateArgs>
  ): Promise<PrismaTheme> {
    return this.prisma.theme.update<T>(args);
  }
  async deleteTheme<T extends Prisma.ThemeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeDeleteArgs>
  ): Promise<PrismaTheme> {
    return this.prisma.theme.delete(args);
  }
  async CreateTheme(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async CreateThemeNew(args: ThemeDto): Promise<ThemeDto> {
    throw new Error("Not implemented");
  }
  async GetThemes(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async GetThemesNew(args: ThemeDto[]): Promise<ThemeDto[]> {
    throw new Error("Not implemented");
  }
}
