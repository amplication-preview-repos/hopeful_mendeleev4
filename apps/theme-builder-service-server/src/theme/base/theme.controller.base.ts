/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ThemeService } from "../theme.service";
import { ThemeCreateInput } from "./ThemeCreateInput";
import { Theme } from "./Theme";
import { ThemeFindManyArgs } from "./ThemeFindManyArgs";
import { ThemeWhereUniqueInput } from "./ThemeWhereUniqueInput";
import { ThemeUpdateInput } from "./ThemeUpdateInput";
import { ThemeDto } from "../ThemeDto";

export class ThemeControllerBase {
  constructor(protected readonly service: ThemeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Theme })
  async createTheme(@common.Body() data: ThemeCreateInput): Promise<Theme> {
    return await this.service.createTheme({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Theme] })
  @ApiNestedQuery(ThemeFindManyArgs)
  async themes(@common.Req() request: Request): Promise<Theme[]> {
    const args = plainToClass(ThemeFindManyArgs, request.query);
    return this.service.themes({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Theme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async theme(
    @common.Param() params: ThemeWhereUniqueInput
  ): Promise<Theme | null> {
    const result = await this.service.theme({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        version: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Theme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTheme(
    @common.Param() params: ThemeWhereUniqueInput,
    @common.Body() data: ThemeUpdateInput
  ): Promise<Theme | null> {
    try {
      return await this.service.updateTheme({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Theme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTheme(
    @common.Param() params: ThemeWhereUniqueInput
  ): Promise<Theme | null> {
    try {
      return await this.service.deleteTheme({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/create-theme")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateTheme(
    @common.Body()
    body: ThemeDto[]
  ): Promise<string> {
    return this.service.CreateTheme(body);
  }

  @common.Post("/themes-new")
  @swagger.ApiOkResponse({
    type: ThemeDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateThemeNew(
    @common.Body()
    body: ThemeDto[]
  ): Promise<ThemeDto> {
    return this.service.CreateThemeNew(body);
  }

  @common.Get("/:id/get-themes")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetThemes(
    @common.Body()
    body: ThemeDto[]
  ): Promise<string> {
    return this.service.GetThemes(body);
  }

  @common.Get("/themes-new")
  @swagger.ApiOkResponse({
    type: ThemeDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetThemesNew(
    @common.Body()
    body: ThemeDto[]
  ): Promise<ThemeDto[]> {
    return this.service.GetThemesNew(body);
  }
}
